using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class bullet : MonoBehaviour {


    GameObject[] target;
    public string target_tag;



    [Header("----------------瞄準效果------------------")]
    [Header("")]
    [Tooltip("瞄準效果")]
    public bool IsAim;
    [Range(0, 1)] [Tooltip("瞄準的旋轉速度")]
    public float Aim_Speed;
    [Range(1, 1.1f)] [Tooltip("逐漸加快瞄準的旋轉速度(使追蹤效果越來越強)")]
    public float Aim_Speed_add;
    [Range(1, 1.1f)] [Tooltip("逐漸緩慢瞄準的旋轉速度(使追蹤效果越來越弱)")]
    public float Aim_Speed_decrease;

    [Header("")]
    [Header("")]
    [Header("----------------回旋效果------------------")]
    [Header("")]
    [Tooltip("回旋效果")]
    public bool IsRotate;
    [Range(-60, 60)] [Tooltip("旋轉幅度")]
    public float Rotate_Range;
    [Range(1, 1.1f)] [Tooltip("逐漸減少旋轉幅度(弧度漸漸變小)")]
    public float Rotate_decrease;
    [Range(1, 1.1f)] [Tooltip("逐漸增加旋轉幅度(弧度漸漸變大)")]
    public float Rotate_add;

    public bool IsRandomRotate;

    [Header("")]
    [Header("")]
    [Header("----------------前進效果------------------")]
    [Header("")]
    [Tooltip("前進效果")]
    public bool IsChase;
    [Range(0, 0.5f)] [Tooltip("前行速度")]
    public float Chase_Speed;
    [Range(1, 1.1f)] [Tooltip("逐漸增加前行速度")]
    public float Chase_Speed_add;








    int i = 0;
    void Awake()
    {
        target = GameObject.FindGameObjectsWithTag(target_tag); //用Tag尋找所有物件(單個物件)
        i = Random.Range(0, target.Length);
    }

    void OnEnable()
    {
        if(IsRandomRotate)
        {
            int i = Random.Range(0,2);
            if (i == 0) { Rotate_Range = -Rotate_Range; }
        }
    }

    void Update ()
    {

        if (target.Length>0 && target[i])
        {
            if (IsAim)
            {
                float angle = TwoObjAngel(transform.position, target[i].transform.position);

                transform.rotation = Quaternion.Lerp(transform.rotation, Quaternion.Euler(new Vector3(0, 0, angle)), Aim_Speed); //角度瞄準目標

                Aim_Speed /= Aim_Speed_decrease;
                if (Aim_Speed < 1)
                {
                    Aim_Speed *= Aim_Speed_add;
                }
            }
        }
        else
        {
            target = GameObject.FindGameObjectsWithTag(target_tag); //用Tag尋找所有物件(單個物件)
            i = Random.Range(0, target.Length);
        }



        if (IsChase)
        {
            transform.Translate(Vector3.up * Chase_Speed); //以y軸前行位移   
            if (Chase_Speed < 0.5f)
            {
                Chase_Speed *= Chase_Speed_add;
            }
        }
        if (IsRotate)
        {
            transform.Rotate(0, 0, Rotate_Range); //旋轉
            Rotate_Range /= Rotate_decrease;
            if (Rotate_Range < 30 && Rotate_Range > -30)
            {
                Rotate_Range *= Rotate_add;
            }
        }


    }


    //計算兩物件的夾角
    float TwoObjAngel(Vector2 my, Vector2 target)
    {
        float angle = -1 * Mathf.Atan2(target.x - my.x, target.y - my.y) * Mathf.Rad2Deg;

        return angle;
    }
    



}
